import cython  # type: ignore
from typing import Dict
from itertools import product

BLOSUM62: Dict[bytes, int] = {
    b'AA': 4,
    b'AC': 0,
    b'AD': -2,
    b'AE': -1,
    b'AF': -2,
    b'AG': 0,
    b'AH': -2,
    b'AI': -1,
    b'AK': -1,
    b'AL': -1,
    b'AM': -1,
    b'AN': -2,
    b'AP': -1,
    b'AQ': -1,
    b'AR': -1,
    b'AS': 1,
    b'AT': 0,
    b'AV': 0,
    b'AW': -3,
    b'AY': -2,
    b'CA': 0,
    b'CC': 9,
    b'CD': -3,
    b'CE': -4,
    b'CF': -2,
    b'CG': -3,
    b'CH': -3,
    b'CI': -1,
    b'CK': -3,
    b'CL': -1,
    b'CM': -1,
    b'CN': -3,
    b'CP': -3,
    b'CQ': -3,
    b'CR': -3,
    b'CS': -1,
    b'CT': -1,
    b'CV': -1,
    b'CW': -2,
    b'CY': -2,
    b'DA': -2,
    b'DC': -3,
    b'DD': 6,
    b'DE': 2,
    b'DF': -3,
    b'DG': -1,
    b'DH': -1,
    b'DI': -3,
    b'DK': -1,
    b'DL': -4,
    b'DM': -3,
    b'DN': 1,
    b'DP': -1,
    b'DQ': 0,
    b'DR': -2,
    b'DS': 0,
    b'DT': -1,
    b'DV': -3,
    b'DW': -4,
    b'DY': -3,
    b'EA': -1,
    b'EC': -4,
    b'ED': 2,
    b'EE': 5,
    b'EF': -3,
    b'EG': -2,
    b'EH': 0,
    b'EI': -3,
    b'EK': 1,
    b'EL': -3,
    b'EM': -2,
    b'EN': 0,
    b'EP': -1,
    b'EQ': 2,
    b'ER': 0,
    b'ES': 0,
    b'ET': -1,
    b'EV': -2,
    b'EW': -3,
    b'EY': -2,
    b'FA': -2,
    b'FC': -2,
    b'FD': -3,
    b'FE': -3,
    b'FF': 6,
    b'FG': -3,
    b'FH': -1,
    b'FI': 0,
    b'FK': -3,
    b'FL': 0,
    b'FM': 0,
    b'FN': -3,
    b'FP': -4,
    b'FQ': -3,
    b'FR': -3,
    b'FS': -2,
    b'FT': -2,
    b'FV': -1,
    b'FW': 1,
    b'FY': 3,
    b'GA': 0,
    b'GC': -3,
    b'GD': -1,
    b'GE': -2,
    b'GF': -3,
    b'GG': 6,
    b'GH': -2,
    b'GI': -4,
    b'GK': -2,
    b'GL': -4,
    b'GM': -3,
    b'GN': 0,
    b'GP': -2,
    b'GQ': -2,
    b'GR': -2,
    b'GS': 0,
    b'GT': -2,
    b'GV': -3,
    b'GW': -2,
    b'GY': -3,
    b'HA': -2,
    b'HC': -3,
    b'HD': -1,
    b'HE': 0,
    b'HF': -1,
    b'HG': -2,
    b'HH': 8,
    b'HI': -3,
    b'HK': -1,
    b'HL': -3,
    b'HM': -2,
    b'HN': 1,
    b'HP': -2,
    b'HQ': 0,
    b'HR': 0,
    b'HS': -1,
    b'HT': -2,
    b'HV': -3,
    b'HW': -2,
    b'HY': 2,
    b'IA': -1,
    b'IC': -1,
    b'ID': -3,
    b'IE': -3,
    b'IF': 0,
    b'IG': -4,
    b'IH': -3,
    b'II': 4,
    b'IK': -3,
    b'IL': 2,
    b'IM': 1,
    b'IN': -3,
    b'IP': -3,
    b'IQ': -3,
    b'IR': -3,
    b'IS': -2,
    b'IT': -1,
    b'IV': 3,
    b'IW': -3,
    b'IY': -1,
    b'KA': -1,
    b'KC': -3,
    b'KD': -1,
    b'KE': 1,
    b'KF': -3,
    b'KG': -2,
    b'KH': -1,
    b'KI': -3,
    b'KK': 5,
    b'KL': -2,
    b'KM': -1,
    b'KN': 0,
    b'KP': -1,
    b'KQ': 1,
    b'KR': 2,
    b'KS': 0,
    b'KT': -1,
    b'KV': -2,
    b'KW': -3,
    b'KY': -2,
    b'LA': -1,
    b'LC': -1,
    b'LD': -4,
    b'LE': -3,
    b'LF': 0,
    b'LG': -4,
    b'LH': -3,
    b'LI': 2,
    b'LK': -2,
    b'LL': 4,
    b'LM': 2,
    b'LN': -3,
    b'LP': -3,
    b'LQ': -2,
    b'LR': -2,
    b'LS': -2,
    b'LT': -1,
    b'LV': 1,
    b'LW': -2,
    b'LY': -1,
    b'MA': -1,
    b'MC': -1,
    b'MD': -3,
    b'ME': -2,
    b'MF': 0,
    b'MG': -3,
    b'MH': -2,
    b'MI': 1,
    b'MK': -1,
    b'ML': 2,
    b'MM': 5,
    b'MN': -2,
    b'MP': -2,
    b'MQ': 0,
    b'MR': -1,
    b'MS': -1,
    b'MT': -1,
    b'MV': 1,
    b'MW': -1,
    b'MY': -1,
    b'NA': -2,
    b'NC': -3,
    b'ND': 1,
    b'NE': 0,
    b'NF': -3,
    b'NG': 0,
    b'NH': 1,
    b'NI': -3,
    b'NK': 0,
    b'NL': -3,
    b'NM': -2,
    b'NN': 6,
    b'NP': -2,
    b'NQ': 0,
    b'NR': 0,
    b'NS': 1,
    b'NT': 0,
    b'NV': -3,
    b'NW': -4,
    b'NY': -2,
    b'PA': -1,
    b'PC': -3,
    b'PD': -1,
    b'PE': -1,
    b'PF': -4,
    b'PG': -2,
    b'PH': -2,
    b'PI': -3,
    b'PK': -1,
    b'PL': -3,
    b'PM': -2,
    b'PN': -2,
    b'PP': 7,
    b'PQ': -1,
    b'PR': -2,
    b'PS': -1,
    b'PT': -1,
    b'PV': -2,
    b'PW': -4,
    b'PY': -3,
    b'QA': -1,
    b'QC': -3,
    b'QD': 0,
    b'QE': 2,
    b'QF': -3,
    b'QG': -2,
    b'QH': 0,
    b'QI': -3,
    b'QK': 1,
    b'QL': -2,
    b'QM': 0,
    b'QN': 0,
    b'QP': -1,
    b'QQ': 5,
    b'QR': 1,
    b'QS': 0,
    b'QT': -1,
    b'QV': -2,
    b'QW': -2,
    b'QY': -1,
    b'RA': -1,
    b'RC': -3,
    b'RD': -2,
    b'RE': 0,
    b'RF': -3,
    b'RG': -2,
    b'RH': 0,
    b'RI': -3,
    b'RK': 2,
    b'RL': -2,
    b'RM': -1,
    b'RN': 0,
    b'RP': -2,
    b'RQ': 1,
    b'RR': 5,
    b'RS': -1,
    b'RT': -1,
    b'RV': -3,
    b'RW': -3,
    b'RY': -2,
    b'SA': 1,
    b'SC': -1,
    b'SD': 0,
    b'SE': 0,
    b'SF': -2,
    b'SG': 0,
    b'SH': -1,
    b'SI': -2,
    b'SK': 0,
    b'SL': -2,
    b'SM': -1,
    b'SN': 1,
    b'SP': -1,
    b'SQ': 0,
    b'SR': -1,
    b'SS': 4,
    b'ST': 1,
    b'SV': -2,
    b'SW': -3,
    b'SY': -2,
    b'TA': 0,
    b'TC': -1,
    b'TD': -1,
    b'TE': -1,
    b'TF': -2,
    b'TG': -2,
    b'TH': -2,
    b'TI': -1,
    b'TK': -1,
    b'TL': -1,
    b'TM': -1,
    b'TN': 0,
    b'TP': -1,
    b'TQ': -1,
    b'TR': -1,
    b'TS': 1,
    b'TT': 5,
    b'TV': 0,
    b'TW': -2,
    b'TY': -2,
    b'VA': 0,
    b'VC': -1,
    b'VD': -3,
    b'VE': -2,
    b'VF': -1,
    b'VG': -3,
    b'VH': -3,
    b'VI': 3,
    b'VK': -2,
    b'VL': 1,
    b'VM': 1,
    b'VN': -3,
    b'VP': -2,
    b'VQ': -2,
    b'VR': -3,
    b'VS': -2,
    b'VT': 0,
    b'VV': 4,
    b'VW': -3,
    b'VY': -1,
    b'WA': -3,
    b'WC': -2,
    b'WD': -4,
    b'WE': -3,
    b'WF': 1,
    b'WG': -2,
    b'WH': -2,
    b'WI': -3,
    b'WK': -3,
    b'WL': -2,
    b'WM': -1,
    b'WN': -4,
    b'WP': -4,
    b'WQ': -2,
    b'WR': -3,
    b'WS': -3,
    b'WT': -2,
    b'WV': -3,
    b'WW': 11,
    b'WY': 2,
    b'YA': -2,
    b'YC': -2,
    b'YD': -3,
    b'YE': -2,
    b'YF': 3,
    b'YG': -3,
    b'YH': 2,
    b'YI': -1,
    b'YK': -2,
    b'YL': -1,
    b'YM': -1,
    b'YN': -2,
    b'YP': -3,
    b'YQ': -1,
    b'YR': -2,
    b'YS': -2,
    b'YT': -2,
    b'YV': -1,
    b'YW': 2,
    b'YY': 7,
}


@cython.ccall
def blosum62_score(
    a: bytes,
    b: bytes,
    fs_as: int = ord(b'X'),
    del_as: int = ord(b'-'),
    a_fs_penalty: int = -1,
    b_fs_penalty: int = -1,
    a_del_penalty: int = -1,
    b_del_penalty: int = -1
) -> float:
    aa_a: int
    aa_b: int
    total_score: float = 0.
    total_n: int = 0
    for aa_a, aa_b in product(a, b):
        if aa_a == aa_b == del_as:
            # both are in-frame deletions, no penalty applied
            pass
        elif aa_a == del_as:
            # a is in-frame deletion but not b
            total_score += a_del_penalty
        elif aa_b == del_as:
            # b is in-frame deletion but not a
            total_score += b_del_penalty
        elif aa_a == aa_b == fs_as:
            # both are out-frame deletions; half penalty
            total_score += (a_fs_penalty + b_fs_penalty) / 2
        elif aa_a == fs_as:
            # a is out-frame deletion but not b
            total_score += a_fs_penalty
        elif aa_b == fs_as:
            # b is out-frame deletion but not a
            total_score += b_fs_penalty
        else:
            # if a or b is unrecognizable, silently skip
            total_score += BLOSUM62.get(bytes([aa_a, aa_b]), 0)
        total_n += 1
    return total_score / total_n if total_n else 0.
